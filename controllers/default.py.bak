# -*- coding: utf-8 -*-

def index():
    posts = db(db.blog_post).select(orderby = db.blog_post.id)
    response.title = 'Recent Posts'
    return locals()

def home():
    response.title = 'Welcome to Blogger!'
    return locals()

def display():
    post = db.blog_post(request.args(0, cast = int))
    db.blog_comment.blog_post.default = post.id
    db.blog_comment.blog_post.readable = False
    db.blog_comment.blog_post.writable = False
    form = SQLFORM(db.blog_comment).process()
    comments = db(db.blog_comment.blog_post == post.id).select()
    response.title = 'Full Article'
    return locals()

@auth.requires_membership('members')
def manage():
    grid = SQLFORM.grid(db.blog_post)
    response.title = 'Manage Posts'
    return locals()

@auth.requires_login()
def create():
    response.title = 'Create New Blog Post'
    form = SQLFORM(db.blog_post).process()
    if form.accepted:
        session.flash = "The content was successfully posted!"
        redirect(URL('index'))
    return locals()

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
